#+STARTUP:
* TODO list
- [ ] Virtual instruments for testing
- [ ] Data I/O from nested measurements
- [ ] Write setup class with saving
- [ ] Docstring stuff
- [ ] Live plotting
- [ ] Remove validator classes - replace with functions

* Motivation
** Nested measurement series
** Standardizing measurement and instrument API
*** Standardizing instrument interface
If all instruments use the same API then you can write routines that do not depend on the details of a particular instrument driver implementation.

This is accomplished by implementing Paramter classes. Instruments can be thought of as containers for parameters. Parameters provide a standard interface for writing/setting parameters.
*** Move away from script based measurement
If measurements all use the same API then you can build new measurements rapidly (with a program) rather than writing a new measurement script for every new task.

This is accomplished by abstracting a measurement procedure to recording a set of parameters while mapping out a hypercube in parameter space. By specifying the parameter space to be mapped and the parameters to be recorded you can deterministically generate a set of commands issued to the instruments that will complete the measurement.
** Build classes that do one thing well
** Separation of data and code
Configuration of instruments is data and should be documented in text rather than in code that must obey python syntax.

This is accomplished by making instruments/setups/parameters capable of writing their configuration to plain text. The objects have classmethods that allow them to be re-instantiated from text. This removes setup "scripts" and replaces them with "setup config files".
** Custom metadata
Easily customize the metadata that is written to disc for a particular measurement.
* Organization
- [X] setup git
- [X] setup linting
- [X] setup pylint/flycheck
- [ ] standardize docstrings
- [ ] setup sphinx auto docs
- [ ] fix pylint config file
- [ ] write unit tests
- [ ] figure out how to make portable conda package
** Linting
*** pylint
Setup pylint with google python style. This is the best syntax checker apparently - I should only need to use pylint.
** Docstring convention
The docstring convention should:
- be supported by Sphinx out of the box
- be consistant with what is used by other scientific codebases
- be compatible with pyment (docstring conversion/generation tool) out of the box.
- be compatible with pydocstyle (docstring style checking tool) out of the box.
I'm picking numpydoc. The only thing that comes close is the google style.
* Features
- [X] logging in file system
- [X] printing object config
- [X] setup in venv (python 3.6 w/ mypy for type checking)
- [X] use slots on mass-produced objects
- [X] stricter autoformatting w/ yapf (not possible)
- [ ] testing nested measurements 
- [ ] saving
- [ ] consistant string formatting for all numbers
- [ ] metadata
- [ ] config file to set folder where data is saved.
** Notes on design
*** dataclass over attrdict
- remove dependance on external attrdict
- dataclass is in main python
- need to wait for python 3.7
*** astropy.units over pint for units
Astropy has:
- better string formatting (automatically support tex labels)
- easier subclassing (Quantity decends directly from numpy.ndarray so documentation for subclassing is better)
- custom units (good for defining units of flux quanta)
- more mature (matplotlib support has better documentation and has existed for a longer period of time)
*** refactor measurements/instruments
- write classes that perform single functions
- improve flexibility/extensibility
*** DataSet
**** Structure
- YYYY-mm-dd_HHMMSS <- folder, 
  - YYYY-mm-dd_HHMMSS_measurement.h5 <- datafile for directly recorded parameters. 
  - list of sub-measurements <- do I sub-divide them by type? I don't think so.
- 1x DataArray with dimension matching the parameter-space dimension (as dictated by Sweeps) per parameter per "Measure" instance.
- 1x Array with dimension matching the parameter-space dimension (as dictated by Sweeps) per Measurement in mlist.
**** DataArray
- subclass np.array (there is some subtley here if you need to preserve the functionality of the np.array)
**** DataSet 
- A set of DataArray.
- A you should be able to make a DataSet from a set of DataSet. This allows you to make a DataSet that contains a DataSet for each "measurement task" in the mlist.
Say that the mlist says do the following @ each point on a grid (e.g. a measurement described by 2 sweeps):
1. Record temperature, SQUID offset swept back
2. Do a heightsweep
3. Do a touchdown
Then the DataSet would have the following structure:
***** DataSet
****** DataSet
******* temperature
******* SQUID offset
****** DataSet
******* heightsweep filenames <- DataArray?
****** DataSet
******* touchdown filenames
*** Python 3.6 and static type checking
Using python 3.6 and static type checking allows for mypy to catch errors in scripts before runtime.

Need to figure out how to make typing check for a "base" class, e.g. instances that inerit from Parameter like VisaParameter will work so that List[Parameter] and List[VisaParameter] = List[Parameter]
*** 
** Instruments
- [ ] GPIB commuication protocal
- [X] how to handle parameter change when the rate/min/max/step not set?
- [ ] a method to access the descriptor object with my new implementation.
*** Sweeping use cases
- Care about all of min/max/step/rate -> use sweep
- Care only about min/max and not step/rate -> use set w/ safe = False. Uses sweep with no check on max/min
- Care only about step/rate and not min/max -> use set w/ safe = False. Set skips sweep and defaults to set.

So there is no logic inside of property.set - it is all contained in checks on property.safe and the existance of property.max/min/step/rate within sweep and step

Flow:
- Try to sweep. If it cant't and safe=True then exception
- If it's a ValueError b/c min/max don't exist and safe=False then sweep anyway.
- If it's a ValueError b/c rate/step don't exist and safe=Fase then do a direct set (but use the max/min)
- If safe = False then try to step. If it can't then 

Uses:
- limits on max/min/step/rate (safe = True
- sweeping w/o value limits (safe=False, rate/step not None)
- setting without sweep limits (safe = False, min/max not None)
- no limits (safe = False)

try: sweep
except -> one or more of min/max/rate/step not defined
try: sweep(set_func=self._set)
except -> one of rate/step not set
try: _set()
except -> one of max/min not set

define [max/min] -> fail, fail, pass
defin [rate/step] -> fail, pass
*** Different Param implementations
1. Descriptors (class variables) manages the value (instance variable) using constraints (instance variable) -> You
2. Instruments inherit from a class that allow instance-variable implementation of the descriptor protocal. -> This is the "cleanest" solution.
3. Dynamically create descriptors that manage values in instance-variable classes (what I had previously) -> causes confusing modification of class variables.
I'm going with option 2. It minimizes the number of objects and their complexity. I don't thing there will be a problem with attribute access on the instruments - but that's the only thing that could go wrong.

The "other" option is the callable API where the dotted lookup for individual instrument parameters is sacrificed. I think this is fine if you write the __repr__ to include the parameter setpoint.
** Setup
- [X] test re-creating from json
- [ ] writing to file
- [ ] loading from file
- [ ] maybe a sorted dict so all setups of similar measurements look the same
** Classes 
*** Measurement
Contains:
- Description of parameter space (what configuration the setup should take) 
- Tasks (a list of things to do @ each point in parameter space)
**** Measurement classes
Measurements have the structure 

"do <<something>> @ points in parameter/time space"

However <<something>> can be as simple as recording an instrument parameter or more complicated (do a sweep e.g. a Touchdown grid) or even more complcated (do a scan @ each height, temperature)
- Measurement base class.
- Routine that is done @ each point in a multi-dimensional sweep. (Is this always just a sweep)
***** Some base class
- Attaches a dataset -> How do you structure the DataSet generically
- Makes all subclasses callable
- Has a __str__
- Can print structure of the measurement
- Specifies parameter space that is explored
- Specifies recorded parameters or what is done @ each point in parameter space
***** Sweep
- Sweep one parameter
- Inherits recorded parameters from base class?
***** Series
- Created from a list of Sweep
**** Different measurements
Check that my measurement can cover all current use cases.
***** Classes of mesurements
- Record various parameters as a function of time (cooling curve in transport)
- Record parameters as a function of
****** Sweep
Sweep a single parameter and monitor n different parameters @ each point in the sweep.
****** 2D Sweep (Series)
Sweep m different parameters and monitor n different parameters @ each point in the sweep.
****** Time Series
Monitor n different parameters as a function of time. Used for spectra and cooling curves
****** Series
Do a sweep (or Series) @ different settings.
***** List of "Procedures"
And the new class that they can be subclassed from. The idea is that can simply define Sweeps in terms of what you are tuning and what you are monioring:
- Touchdown (Sweep)
- Plane (Series) -> Series of Touchdown
- Linecut (Sweep) 
- Scan (Series) -> Series of Linecut  
- Heightsweep (Sweep)
- IV curves (Sweep)
- Modulation plots (Series) -> Series of IV
- FC plots (Series)
- Spectrum (Time Series)
- Cooling curve (Time Series)
- Magnetotransport (Series) -> Series of IV
Since the single-parameter sweep is a special case of a multi-parameter sweep, my approach is to use a Sweep as something that describes tuning an external knob. You construct a measurement by combining Sweeps (even a single sweep) with a Getter or Measure that tells you what to do at each point in the sweep.

Time measurements don't naturally fall into this system. I should probably make a separate MeasureTime class.
**** Extensible measurements
***** Using Getter class
Allows you to add/remove recorded parameters w/ a 1-liner. Modify recorded attributes on the fly instead of modifying the source of the Procedure.
*** Sweep
Describes adjusting a single parameter. Contains:
- The parameter that is adjusted
- What values the parameter can take
Generates:
- A set of "callables" can set the equipment to the specified configurations.
** Documentation
*** Instrumentation
The idea is to make objects from the ground up starting with a "Param" (the lowest-level object that interfaces directly with VISA). Instruments are composed of "Params" and a "Setup" is a collection of instruments.
**** Param
*** Measurement
  
